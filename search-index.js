var searchIndex = JSON.parse('{\
"minipl":{"doc":"This library contains all the necessary functionality for …","t":[3,11,11,11,11,12,11,11,11,11,0,11,11,0,0,12,11,0,11,11,11,0,3,13,13,4,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,13,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,13,3,13,4,3,3,13,3,13,3,13,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,12,12,12,12,13,13,13,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,12,12,12,12,3,3,8,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11],"n":["StartEndSpan","borrow","borrow_mut","clone","clone_into","end","eq","fmt","from","into","lexing","ne","new","parsing","runtime","start","to_owned","tokens","try_from","try_into","type_id","visitors","Lexer","OutOfChars","ParseIntError","RecoverableLexingError","SingleDot","UnknownChar","UnknownEscape","UnrecoverableLexingError","Unterminated","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","into","into","into","labels","ne","new","scan","scan_token","scan_verbose","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","0","AssignToNonVariable","EndMissingFor","ExpectedAssignFoundEqual","ExpectedAssignFoundToken","ExpectedExpression","ExpectedIdentifier","ExpectedTypeAnnotation","ForMissingDo","ForMissingIn","ForMissingRange","ForMissingVariable","MissingParen","MissingSemicolon","OutOfTokens","ParseError","Parser","ReadToNonVariable","borrow","borrow","borrow_mut","borrow_mut","expression","fmt","fmt","fmt","from","from","help","into","into","labels","new","parse","statement","to_string","try_from","try_from","try_into","try_into","type_id","type_id","variable","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","1","1","1","1","Assign","Assign","Binary","Binary","Expr","Expression","Grouping","Grouping","Literal","Literal","Logical","Logical","Unary","Unary","VariableUsage","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","eq","expr","expression","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","left","left","name","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new","new","operator","operator","operator","right","right","right","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","token","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","0","0","0","0","0","0","0","Assert","Expression","Forloop","Print","Read","Statement","Stmt","VariableDefinition","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","into","into","ne","ne","new","span","stmt","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","Boolean","Number","Text","VarType","Variable","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","initializer","into","into","kind","name","ne","new","span","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","AsBooleanFailed","AsNumericFailed","AsTextFailed","AssertExprNotTruthy","AssertionFailed","Boolean","Environment","EqualTypeMismatch","ForBadAssignment","ForEndLarger","ForEndNonNumeric","ForStartNonNumeric","LessTypeMismatch","Nothing","Number","Object","PlusTypeMismatch","PrintCouldNotFlush","ReadLineFailed","ReadNothing","ReadParseBoolFailed","ReadParseIntFailed","RuntimeError","Text","UnexpectedBinaryOperator","UnexpectedLiteral","UnexpectedLogicalOperator","UnexpectedUnaryOperator","VariableAssignToUndeclared","VariableAssignTypeMismatch","VariableGetFailed","VariableReDeclaration","as_bool","as_numeric","as_text","assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","define","fmt","fmt","fmt","fmt","fmt","from","from","from","get","help","into","into","into","kind_to_string","labels","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","1","1","1","1","1","2","2","2","2","3","3","3","3","And","Assert","Assign","Bang","Bool","Colon","Comment","Do","EOF","End","Equal","Error","False","For","Identifier","In","Int","Less","Minus","Number","ParenLeft","ParenRight","Plus","Print","Range","RawToken","Read","Semicolon","Slash","Star","String","Text","Token","True","Var","Whitespace","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","into","into","is_error","ne","ne","new","span","to_owned","to_owned","token","tokentype","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","ASTPrinter","Interpreter","Visitor","borrow","borrow","borrow_mut","borrow_mut","default","default","environment","eval","fmt","fmt","from","from","into","into","new","print","try_from","try_from","try_into","try_into","type_id","type_id","visit_expression","visit_expression","visit_expression","visit_statement","visit_statement","visit_statement"],"q":["minipl","","","","","","","","","","","","","","","","","","","","","","minipl::lexing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","minipl::lexing::RecoverableLexingError","minipl::lexing::UnrecoverableLexingError","","minipl::parsing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","minipl::parsing::ParseError","","","","","","","","","","","","","","","","","","","","","","","","","","minipl::parsing::expression","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","minipl::parsing::expression::Expr","","","","","","","minipl::parsing::statement","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","minipl::parsing::statement::Stmt","","","","","","minipl::parsing::variable","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","minipl::runtime","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","minipl::runtime::Object","","","minipl::runtime::RuntimeError","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","minipl::tokens","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","minipl::tokens::RawToken","","","","minipl::visitors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The span i.e. the location descriptor of the token, in …","","","","","End location of the span, as a byte offset, exclusive","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The lexing for the Mini-PL language","","Creates a new <code>StartEndSpan</code> given the two byte offsets","The parsing for the Mini-PL language","The runtime features of Mini-PL language","Start location of the span, as a byte offset, inclusive","","The tokens of the Mini-PL language","","","","The visitors for the Mini-PL language","The lexer for the Mini-PL programming language","Ran out of tokens while scanning","Unable to parse into an integer","The recoverable error enum for the Lexer, these will go in …","Encountered a single dot. Only use of dots in Mini-PL is …","Encountered an unknown character - something that is not …","Unknown escape code. Supported escape characters are: \\\\r …","The unrecoverable error enum for the Lexer","Unterminated string or unescaped newline. Raw newlines in …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Initializes a lexer with the given input <code>&amp;str</code>","Main entrypoint of the lexer. Given an input string, …","The main helper function of the lexer, the function that …","Alternative for Lexer::scan, but does not delete ignorable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The parser for the Mini-PL programming language","","","","","","Expressions in the Mini-PL programming language.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Initializes a parser with the given <code>Vec</code> of <code>Token</code>s","Parses the tokens, returning <code>Vec&lt;Statement&gt;</code> or <code>ParseError</code>","Statements in the Mini-PL programming language.","","","","","","","","Variables in the Mini-PL programming language.","","","","","","","","","","","","","","","","","","","","","","","","","","","Assignment to a variable","Assignment to a variable","Binary expression. Any expression that applies an operator …","Binary expression","Low-level enum containing all possible expression variants.","A richer Expression type that wraps the <code>Expr</code> type, and …","Grouping expression. These are constructed with the use of …","Grouping expression, mostly transparent","Literal “expression”. Contains a literal value.","Literal value expression","Logical operator expression. Currently, only logical AND <code>&amp;</code> …","Logical expression. Currently only AND exists","Unary expression. Any expression that takes a unary …","Unary expression","Usage of a variable","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The contents of the Expression, as a low-level Expr","The expression contained within this grouping","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Left hand side of the binary expression","Left hand side of the logical expression","Name of the variable","","","","","","","","","Creates a new Expression given the low-level Expr and …","Creates a new Assign Expression","Creates a new Binary Expression","Creates a new Grouping Expression","Creates a new Literal Expression","Creates a new Logical Expression","Creates a new Unary Expression","The operator of this binary expression","The operator of this logical expression","The operator for this unary expression","Right hand side of the binary expression","Right hand side of the logical expression","The expression to which to apply the unary operator","The location span <code>(start, end)</code> of the Expression","","","","","","","","","The Token used in this assignment","","","","","","","","","","","","","","","","","","","","","","","","","The Expr to evaluate and then assign as the new value of …","The literal value","","","","","","","","","","","","","A richer Statement type that wraps the Stmt enum, and …","Low-level enum containing all possible statement variants.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates a new Statement","The location span <code>(start, end)</code> of the Statement","The contents of the Statement, as a low-level Stmt","","","","","","","","","","","","","","","Boolean value, <code>true</code> or <code>false</code>","Integer value, internally represented as an i64","Text value, internally represented as a String","Enum of the possible data types in the Mini-PL programming …","A rich Variable type.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Optional initializer Expression that is evaluated in order …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The type of the variable","Name of the variable, the identifier used for it in the …","","Creates a new Variable","Location of the variable in the source code","","","","","","","","","","","","","","Boolean value","Environment is a scoping storage for variables","","","","","","","Empty value","Number value","The main enum of the runtime values within the language …","","","","","","","Runtime errors of the interpreter","Text value","","","","","","","","","Fallible cast of an Object to a bool.","Fallible cast of an Object to an i64.","Fallible cast of an Object to a String.","Assigns a new value to an existing variable in the …","","","","","","","","","","","","Declares a new variable with the given name and value into …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the value of the variable with the given name from …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the type of the object as a string. Used for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>&amp;</code> Logical AND operator","<code>assert</code> used for evaluating truthy statements and stopping …","<code>:=</code> Assign operator used for assigning values to variables","<code>!</code> Logical NOT operator","<code>bool</code> type keyword for boolean data","<code>:</code> Colon operator used for type ascription","Comment type. Exists for the internal convenience of the …","<code>do</code> used in the for loop definitions as a keyword before …","End of file marker. Exists for the internal convenience of …","<code>end</code> used in the for loop definitions as an <code>end for</code> keyword …","<code>=</code> Equal operator used for equality checking. Note: not …","Error type. Exists for propagating lexing errors with …","<code>false</code> boolean literal","<code>for</code> keyword for for loops","Identifier, a name for a variable. Internally represented …","<code>in</code> used in the for loop definitions as a keyword before …","<code>int</code> type keyword for numeric data","<code>&lt;</code> Less operator used for comparison. Note: this is the …","<code>-</code> Minus operator used for substraction","Literal number. Internally represented as an i64","<code>(</code> Left paren used for grouping","<code>)</code> Right paren used for grouping","<code>+</code> Plus operator for addition","<code>print</code> keyword for printing to standard output","<code>..</code> Range operator used for defining ranges for for loops","All raw tokens (also known as lexemes) of the Mini-PL …","<code>read</code> keyword for reading a variable from standard input","<code>;</code> Semicolon used for terminating statements","<code>/</code> Slash operator used for division","<code>*</code> Star operator used for multiplication","<code>string</code> type keyword for string data","Literal string. Internally represented as a String","A richer Token type that wraps the <code>RawToken</code> type, and …","<code>true</code> boolean literal","<code>var</code> keyword for declaring a variable identifier","Whitespace type. Exists for the internal convenience of …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Helper method for filtering <code>Error</code> types for error message …","","","Creates a new Token type, when given a <code>RawToken</code> and a span …","The span i.e. the location descriptor of the token","","","The raw token itself","Helper method for returning the <code>RawToken</code> type of the Token","","","","","","","","","","","ASTPrinter is a Visitor for prettyprinting the abstract …","Interpreter is a Visitor for interpreting i.e. evaluating …","The main visitor trait for the visitor pattern. See e.g. …","","","","","Creates a new ASTPrinter","","Environment for storing variables","The primary function of the Interpreter: evaluates all …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new Interpreter object","The primary function of the ASTPrinter: returns the …","","","","","","","Expressions","","","Statements","",""],"i":[0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,1,1,1,0,0,2,2,0,3,3,3,0,3,2,3,4,2,3,4,3,3,3,2,2,3,3,4,2,3,4,2,3,4,2,3,4,4,4,4,3,2,3,2,3,4,2,3,4,2,3,4,5,6,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,8,8,9,8,9,0,8,8,9,8,9,8,8,9,8,9,9,0,8,8,9,8,9,8,9,0,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,11,12,13,14,17,18,20,21,22,23,24,0,25,0,25,0,0,0,25,0,25,0,25,0,25,25,25,26,27,28,29,30,31,32,25,26,27,28,29,30,31,32,25,26,27,28,29,30,31,32,25,26,27,28,29,30,31,32,25,26,27,28,29,30,31,32,26,29,25,26,27,28,29,30,31,32,25,26,27,28,29,30,31,32,25,26,27,28,29,30,31,32,28,31,27,25,26,27,28,29,30,31,32,26,27,28,29,30,31,32,28,31,32,28,31,32,26,25,26,27,28,29,30,31,32,27,25,26,27,28,29,30,31,32,25,26,27,28,29,30,31,32,25,26,27,28,29,30,31,32,27,30,33,34,35,36,37,38,39,40,40,40,40,40,0,0,40,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40,41,41,41,41,40,41,40,41,40,41,40,41,42,43,44,45,46,47,48,48,48,0,0,48,49,48,49,48,49,48,49,48,49,48,49,48,49,49,48,49,49,49,49,49,49,48,49,48,49,48,49,48,49,50,50,50,50,50,51,0,50,50,50,50,50,50,51,51,0,50,50,50,50,50,50,0,51,50,50,50,50,50,50,50,50,51,51,51,52,51,52,50,51,52,50,51,52,51,52,52,52,51,51,52,50,50,51,52,50,52,50,51,52,50,51,50,51,52,51,50,51,52,50,51,52,50,51,52,50,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,56,57,61,62,63,64,65,66,69,70,71,75,61,62,71,75,61,62,71,75,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,0,76,76,76,76,76,76,0,76,76,76,77,76,77,76,77,76,77,76,77,76,77,76,77,76,77,76,77,77,76,77,77,77,76,77,77,77,76,77,76,77,76,78,79,80,81,0,0,0,82,83,82,83,82,83,83,83,82,83,82,83,82,83,83,82,82,83,82,83,82,83,84,82,83,84,82,83],"f":[null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["startendspan",3]],[[["",0],["",0]]],null,[[["",0],["startendspan",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],null,[[["",0],["startendspan",3]],["bool",0]],[[["usize",0],["usize",0]]],null,null,null,[[["",0]]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["recoverablelexingerror",4]],[[["",0],["",0]]],[[["",0],["recoverablelexingerror",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["option",4,[["box",3,[["iterator",8]]]]]],[[["",0],["recoverablelexingerror",4]],["bool",0]],[[["str",0]]],[[["",0]],["result",6,[["vec",3,[["token",3]]]]]],[[["",0]],["result",6,[["token",3],["unrecoverablelexingerror",4]]]],[[["",0]],["result",6,[["vec",3,[["token",3]]]]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0]],["option",4,[["box",3,[["display",8]]]]]],[[]],[[]],[[["",0]],["option",4,[["box",3,[["iterator",8]]]]]],[[["vec",3,[["token",3]]]]],[[["",0]],["result",4,[["vec",3,[["statement",3]]],["parseerror",4]]]],null,[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["expr",4]],[[["",0]],["expression",3]],[[["",0]],["assign",3]],[[["",0]],["binary",3]],[[["",0]],["grouping",3]],[[["",0]],["literal",3]],[[["",0]],["logical",3]],[[["",0]],["unary",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["expr",4]],["bool",0]],[[["",0],["expression",3]],["bool",0]],[[["",0],["assign",3]],["bool",0]],[[["",0],["binary",3]],["bool",0]],[[["",0],["grouping",3]],["bool",0]],[[["",0],["literal",3]],["bool",0]],[[["",0],["logical",3]],["bool",0]],[[["",0],["unary",3]],["bool",0]],null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[["",0],["expr",4]],["bool",0]],[[["",0],["expression",3]],["bool",0]],[[["",0],["assign",3]],["bool",0]],[[["",0],["binary",3]],["bool",0]],[[["",0],["grouping",3]],["bool",0]],[[["",0],["literal",3]],["bool",0]],[[["",0],["logical",3]],["bool",0]],[[["",0],["unary",3]],["bool",0]],[[["expr",4],["startendspan",3]]],[[["str",0],["token",3],["expression",3]]],[[["expression",3],["token",3],["expression",3]]],[[["expression",3]]],[[["token",3]]],[[["expression",3],["token",3],["expression",3]]],[[["token",3],["expression",3]]],null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["stmt",4]],[[["",0]],["statement",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["stmt",4]],["bool",0]],[[["",0],["statement",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["",0],["stmt",4]],["bool",0]],[[["",0],["statement",3]],["bool",0]],[[["stmt",4],["startendspan",3]]],null,null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["vartype",4]],[[["",0]],["variable",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["vartype",4]],["bool",0]],[[["",0],["variable",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],null,[[]],[[]],null,null,[[["",0],["variable",3]],["bool",0]],[[["str",0],["vartype",4],["option",4,[["expression",3]]],["startendspan",3]]],null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",6,[["bool",0],["runtimeerror",4]]]],[[["",0]],["result",6,[["i64",0],["runtimeerror",4]]]],[[["",0]],["result",6,[["string",3],["runtimeerror",4]]]],[[["",0],["str",0],["object",4],["startendspan",3]],["result",6,[["object",4],["runtimeerror",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["object",4]],[[["",0]],["environment",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["environment",3]],[[["",0],["str",0],["object",4],["startendspan",3]],["result",6,[["runtimeerror",4]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["",0],["str",0]],["result",6,[["object",4],["runtimeerror",4]]]],[[["",0]],["option",4,[["box",3,[["display",8]]]]]],[[]],[[]],[[]],[[["",0]],["string",3]],[[["",0]],["option",4,[["box",3,[["iterator",8]]]]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["token",3]],[[["",0]],["rawtoken",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["token",3]],["bool",0]],[[["",0],["rawtoken",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0],["token",3]],["bool",0]],[[["",0],["rawtoken",4]],["bool",0]],[[["rawtoken",4],["startendspan",3]]],null,[[["",0]]],[[["",0]]],null,[[["",0]],["rawtoken",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[],["interpreter",3]],null,[[["",0]],["result",6,[["runtimeerror",4]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["",0],["statement",3]],["result",6,[["string",3],["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["expression",3]],["result",6]],[[["",0],["expression",3]],["result",6,[["string",3],["error",3]]]],[[["",0],["expression",3]],["result",6,[["object",4],["runtimeerror",4]]]],[[["",0],["statement",3]],["result",6]],[[["",0],["statement",3]],["result",6,[["string",3],["error",3]]]],[[["",0],["statement",3]],["result",6,[["object",4],["runtimeerror",4]]]]],"p":[[3,"StartEndSpan"],[4,"UnrecoverableLexingError"],[4,"RecoverableLexingError"],[3,"Lexer"],[13,"UnknownChar"],[13,"OutOfChars"],[13,"ParseIntError"],[4,"ParseError"],[3,"Parser"],[13,"MissingParen"],[13,"ExpectedExpression"],[13,"ExpectedIdentifier"],[13,"ExpectedTypeAnnotation"],[13,"ExpectedAssignFoundToken"],[13,"OutOfTokens"],[13,"MissingSemicolon"],[13,"AssignToNonVariable"],[13,"ReadToNonVariable"],[13,"ExpectedAssignFoundEqual"],[13,"ForMissingVariable"],[13,"ForMissingRange"],[13,"ForMissingIn"],[13,"ForMissingDo"],[13,"EndMissingFor"],[4,"Expr"],[3,"Expression"],[3,"Assign"],[3,"Binary"],[3,"Grouping"],[3,"Literal"],[3,"Logical"],[3,"Unary"],[13,"Assign"],[13,"Binary"],[13,"Grouping"],[13,"Literal"],[13,"Logical"],[13,"Unary"],[13,"VariableUsage"],[4,"Stmt"],[3,"Statement"],[13,"Assert"],[13,"Expression"],[13,"Forloop"],[13,"Print"],[13,"Read"],[13,"VariableDefinition"],[4,"VarType"],[3,"Variable"],[4,"RuntimeError"],[4,"Object"],[3,"Environment"],[13,"Number"],[13,"Text"],[13,"Boolean"],[13,"ForEndNonNumeric"],[13,"ForStartNonNumeric"],[13,"AsNumericFailed"],[13,"AsBooleanFailed"],[13,"AsTextFailed"],[13,"EqualTypeMismatch"],[13,"LessTypeMismatch"],[13,"UnexpectedBinaryOperator"],[13,"UnexpectedLiteral"],[13,"UnexpectedLogicalOperator"],[13,"UnexpectedUnaryOperator"],[13,"AssertExprNotTruthy"],[13,"AssertionFailed"],[13,"ForBadAssignment"],[13,"ForEndLarger"],[13,"PlusTypeMismatch"],[13,"VariableReDeclaration"],[13,"VariableAssignToUndeclared"],[13,"VariableGetFailed"],[13,"VariableAssignTypeMismatch"],[4,"RawToken"],[3,"Token"],[13,"Identifier"],[13,"Number"],[13,"Text"],[13,"Error"],[3,"ASTPrinter"],[3,"Interpreter"],[8,"Visitor"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};